generator client {
  provider = "prisma-client-js"
  output   = "../_generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  telegram_id        String   @unique
  username           String?
  first_name         String?
  last_name          String?
  photo_url          String?
  language_code      String?
  allows_write_to_pm Boolean?
  auth_date          String?
  referrerId         String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  profile        Profile?
  user_statistic UserStatistic?
  meditation     Meditation?
  job            Job?
  mine           Mine?
  facts          Facts[]

  @@map("users")
}

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fraktion        Fraktion?
  nikname         String?   @unique
  gender          Gender?
  color_theme     String?
  avatar_url      String?
  player_motto    String?
  lvl             Int       @default(1)
  exp             Int       @default(0)
  mana            Int       @default(100)
  gold            Int       @default(50)
  diamond         Int       @default(50)
  fight           Int       @default(30)
  last_fight_time DateTime?
  glory           Int       @default(0)

  power      Int @default(1)
  protection Int @default(1)
  speed      Int @default(1)
  skill      Int @default(1)
  qi         Int @default(1)

  current_hitpoint Int      @default(100)
  max_hitpoint     Int      @default(100)
  last_hp_update   DateTime @default(now())

  @@map("profiles")
}

model Mine {
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @unique
  energy         Int       @default(25)
  last_mine_at   DateTime @default(now())
  last_energy_at DateTime @default(now())
  updated_at     DateTime  @updatedAt

  @@map("mines")
}

model UserStatistic {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  wins            Int @default(0)
  loses           Int @default(0)
  meditated_hours Int @default(0)
  mined_gold      Int @default(0)
  mined_count     Int @default(0)

  @@map("user_statistics")
}

model Meditation {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  on_meditation     Boolean   @default(false)
  start_meditation  DateTime?
  meditation_hours  Int?
  meditation_revard Int?

  @@map("meditations")
}

model Job {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  on_job     Boolean   @default(false)
  start_job  DateTime?
  job_hours  Int?
  job_revard Int?

  @@map("jobs")
}

model Facts {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         FactsType
  status       FactsStatus
  mana_reward  Int?
  gold_reward  Int?
  exp_reward   Int?
  active_hours Int?
  createdAt    DateTime    @default(now())

  @@index([userId])
  @@map("facts")
}

enum FactsStatus {
  CHECKED
  NO_CHECKED
}

enum FactsType {
  MEDITATION
  MINE
}

enum Fraktion {
  ADEPT
  NOVICE
}

enum Gender {
  MALE
  FEMALE
}
