"use client";
import { useEffect, useRef } from "react";
import { useRouter, usePathname } from "next/navigation";

export function useTelegramBack() {
  const router = useRouter();
  const pathname = usePathname();
  const initializedRef = useRef(false); // —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ

  useEffect(() => {
    let WebApp: any;
    const hideBackPaths = ["/", "/registration"];

    const handleBack = () => {
      try {
        console.log("üîô Telegram Back pressed on:", pathname);
        router.back();
      } catch (err) {
        console.error("Telegram back handler error:", err);
      }
    };

    (async () => {
      const sdk = await import("@twa-dev/sdk");
      WebApp = sdk.default;

      if (hideBackPaths.includes(pathname)) {
        console.log("üôà –°–∫—Ä—ã–≤–∞—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ:", pathname);
        WebApp.BackButton.hide();
        return;
      }

      WebApp.BackButton.show();

      // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      if (!initializedRef.current) {
        WebApp.BackButton.onClick(handleBack);
        initializedRef.current = true;
        console.log("‚úÖ Telegram Back Button –ø–æ–¥–ø–∏—Å–∞–Ω");
      }
    })();

    return () => {
      if (WebApp && initializedRef.current) {
        WebApp.BackButton.offClick(handleBack);
        initializedRef.current = false;
        console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Back Button");
      }
    };
  }, [pathname]);
}
